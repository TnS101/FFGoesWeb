// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Context;

namespace Persistence.Migrations
{
    [DbContext(typeof(FFDbContext))]
    [Migration("20200403041417_energy")]
    partial class energy
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Entities.Common.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("ForumPoints")
                        .HasColumnType("int");

                    b.Property<string>("FriendId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLoggedIn")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("MasteryPoints")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("OnlineTime")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Stars")
                        .HasColumnType("int");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("UserStatusId")
                        .HasColumnType("int");

                    b.Property<int>("Warnings")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FriendId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("StatusId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Entities.Common.Social.Comment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EditedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.Property<string>("ReplyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TopicId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ReplyId");

                    b.HasIndex("TopicId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Domain.Entities.Common.Social.FriendRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SenderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SentOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("FriendRequests");
                });

            modelBuilder.Entity("Domain.Entities.Common.Social.Message", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EditedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("SenderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SentOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Domain.Entities.Common.Social.Notification", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationSection")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CauserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RecievedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Domain.Entities.Common.Social.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IClass")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("Domain.Entities.Common.Social.Topic", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EditedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("Domain.Entities.Common.Social.UserStatus", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("StatusId");

                    b.ToTable("UserStatuses");
                });

            modelBuilder.Entity("Domain.Entities.Common.Social.UserTopics", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TopicId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "TopicId");

                    b.HasIndex("TopicId");

                    b.ToTable("UsersTopics");
                });

            modelBuilder.Entity("Domain.Entities.Game.Items.Armor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Agility")
                        .HasColumnType("int");

                    b.Property<double>("ArmorValue")
                        .HasColumnType("float");

                    b.Property<int>("BuyPrice")
                        .HasColumnType("int");

                    b.Property<string>("ClassType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Intellect")
                        .HasColumnType("int");

                    b.Property<bool>("IsCraftable")
                        .HasColumnType("bit");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ResistanceValue")
                        .HasColumnType("float");

                    b.Property<int>("SellPrice")
                        .HasColumnType("int");

                    b.Property<string>("Slot")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Spirit")
                        .HasColumnType("int");

                    b.Property<int>("Stamina")
                        .HasColumnType("int");

                    b.Property<int>("Strength")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Armors");
                });

            modelBuilder.Entity("Domain.Entities.Game.Items.Consumeable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsCraftable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("StatReplenish")
                        .HasColumnType("float");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Consumeables");
                });

            modelBuilder.Entity("Domain.Entities.Game.Items.Equipment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("BootsSlot")
                        .HasColumnType("bit");

                    b.Property<bool>("BracerSlot")
                        .HasColumnType("bit");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<bool>("ChestplateSlot")
                        .HasColumnType("bit");

                    b.Property<bool>("GlovesSlot")
                        .HasColumnType("bit");

                    b.Property<bool>("HelmetSlot")
                        .HasColumnType("bit");

                    b.Property<string>("HeroId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("LeggingsSlot")
                        .HasColumnType("bit");

                    b.Property<bool>("ShoulderSlot")
                        .HasColumnType("bit");

                    b.Property<bool>("TrinketSlot")
                        .HasColumnType("bit");

                    b.Property<bool>("WeaponSlot")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("HeroId")
                        .IsUnique()
                        .HasFilter("[HeroId] IS NOT NULL");

                    b.ToTable("Equipments");
                });

            modelBuilder.Entity("Domain.Entities.Game.Items.Inventory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("HeroId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("HeroId")
                        .IsUnique()
                        .HasFilter("[HeroId] IS NOT NULL");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("Domain.Entities.Game.Items.ManyToMany.Equipments.ArmorEquipment", b =>
                {
                    b.Property<int>("ArmorId")
                        .HasColumnType("int");

                    b.Property<string>("EquipmentId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ArmorId", "EquipmentId");

                    b.HasIndex("EquipmentId");

                    b.ToTable("ArmorsEquipments");
                });

            modelBuilder.Entity("Domain.Entities.Game.Items.ManyToMany.Equipments.TrinketEquipment", b =>
                {
                    b.Property<int>("TrinketId")
                        .HasColumnType("int");

                    b.Property<string>("EquipmentId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TrinketId", "EquipmentId");

                    b.HasIndex("EquipmentId");

                    b.ToTable("TrinketEquipments");
                });

            modelBuilder.Entity("Domain.Entities.Game.Items.ManyToMany.Equipments.WeaponEquipment", b =>
                {
                    b.Property<int>("WeaponId")
                        .HasColumnType("int");

                    b.Property<string>("EquipmentId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("WeaponId", "EquipmentId");

                    b.HasIndex("EquipmentId");

                    b.ToTable("WeaponsEquipments");
                });

            modelBuilder.Entity("Domain.Entities.Game.Items.ManyToMany.Inventories.ArmorInventory", b =>
                {
                    b.Property<int>("ArmorId")
                        .HasColumnType("int");

                    b.Property<string>("InventoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.HasKey("ArmorId", "InventoryId");

                    b.HasIndex("InventoryId");

                    b.ToTable("ArmorsInventories");
                });

            modelBuilder.Entity("Domain.Entities.Game.Items.ManyToMany.Inventories.ConsumeableInventory", b =>
                {
                    b.Property<int>("ConsumeableId")
                        .HasColumnType("int");

                    b.Property<string>("InventoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.HasKey("ConsumeableId", "InventoryId");

                    b.HasIndex("InventoryId");

                    b.ToTable("ConsumeableInventory");
                });

            modelBuilder.Entity("Domain.Entities.Game.Items.ManyToMany.Inventories.MaterialInventory", b =>
                {
                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<string>("InventoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.HasKey("MaterialId", "InventoryId");

                    b.HasIndex("InventoryId");

                    b.ToTable("MaterialsInventories");
                });

            modelBuilder.Entity("Domain.Entities.Game.Items.ManyToMany.Inventories.ToolInventory", b =>
                {
                    b.Property<int>("ToolId")
                        .HasColumnType("int");

                    b.Property<string>("InventoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.HasKey("ToolId", "InventoryId");

                    b.HasIndex("InventoryId");

                    b.ToTable("ToolsInventories");
                });

            modelBuilder.Entity("Domain.Entities.Game.Items.ManyToMany.Inventories.TreasureInventory", b =>
                {
                    b.Property<int>("TreasureId")
                        .HasColumnType("int");

                    b.Property<string>("InventoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.HasKey("TreasureId", "InventoryId");

                    b.HasIndex("InventoryId");

                    b.ToTable("TreasuresInventories");
                });

            modelBuilder.Entity("Domain.Entities.Game.Items.ManyToMany.Inventories.TreasureKeyInventory", b =>
                {
                    b.Property<int>("TreasureKeyId")
                        .HasColumnType("int");

                    b.Property<string>("InventoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.HasKey("TreasureKeyId", "InventoryId");

                    b.HasIndex("InventoryId");

                    b.ToTable("TreasureKeysInventories");
                });

            modelBuilder.Entity("Domain.Entities.Game.Items.ManyToMany.Inventories.TrinketInventory", b =>
                {
                    b.Property<int>("TrinketId")
                        .HasColumnType("int");

                    b.Property<string>("InventoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.HasKey("TrinketId", "InventoryId");

                    b.HasIndex("InventoryId");

                    b.ToTable("TrinketsInventories");
                });

            modelBuilder.Entity("Domain.Entities.Game.Items.ManyToMany.Inventories.WeaponInventory", b =>
                {
                    b.Property<int>("WeaponId")
                        .HasColumnType("int");

                    b.Property<string>("InventoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.HasKey("WeaponId", "InventoryId");

                    b.HasIndex("InventoryId");

                    b.ToTable("WeaponsInventories");
                });

            modelBuilder.Entity("Domain.Entities.Game.Items.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BuyPrice")
                        .HasColumnType("int");

                    b.Property<int>("FuelCount")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCraftable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDisolveable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRefineable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelatedMaterials")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SellPrice")
                        .HasColumnType("int");

                    b.Property<int?>("ToolId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ToolId");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("Domain.Entities.Game.Items.Tool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BuyPrice")
                        .HasColumnType("int");

                    b.Property<int>("Durability")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCraftable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tools");
                });

            modelBuilder.Entity("Domain.Entities.Game.Items.Treasure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rarity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Reward")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Treasures");
                });

            modelBuilder.Entity("Domain.Entities.Game.Items.TreasureKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rarity")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TreasureKeys");
                });

            modelBuilder.Entity("Domain.Entities.Game.Items.Trinket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Agility")
                        .HasColumnType("int");

                    b.Property<int>("BuyPrice")
                        .HasColumnType("int");

                    b.Property<string>("ClassType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Intellect")
                        .HasColumnType("int");

                    b.Property<bool>("IsCraftable")
                        .HasColumnType("bit");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SellPrice")
                        .HasColumnType("int");

                    b.Property<string>("Slot")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Spirit")
                        .HasColumnType("int");

                    b.Property<int>("Stamina")
                        .HasColumnType("int");

                    b.Property<int>("Strength")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Trinkets");
                });

            modelBuilder.Entity("Domain.Entities.Game.Items.Weapon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Agility")
                        .HasColumnType("int");

                    b.Property<double>("AttackPower")
                        .HasColumnType("float");

                    b.Property<int>("BuyPrice")
                        .HasColumnType("int");

                    b.Property<string>("ClassType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Intellect")
                        .HasColumnType("int");

                    b.Property<bool>("IsCraftable")
                        .HasColumnType("bit");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SellPrice")
                        .HasColumnType("int");

                    b.Property<string>("Slot")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Spirit")
                        .HasColumnType("int");

                    b.Property<int>("Stamina")
                        .HasColumnType("int");

                    b.Property<int>("Strength")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Weapons");
                });

            modelBuilder.Entity("Domain.Entities.Game.Units.EnergyChanges", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HeroId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastChangedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HeroId");

                    b.ToTable("EnergyChanges");
                });

            modelBuilder.Entity("Domain.Entities.Game.Units.FightingClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("ArmorValue")
                        .HasColumnType("float");

                    b.Property<double>("AttackPower")
                        .HasColumnType("float");

                    b.Property<string>("ClassType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("CritChance")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HealthRegen")
                        .HasColumnType("int");

                    b.Property<string>("IconURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MagicPower")
                        .HasColumnType("float");

                    b.Property<int>("ManaRegen")
                        .HasColumnType("int");

                    b.Property<double>("MaxHP")
                        .HasColumnType("float");

                    b.Property<double>("MaxMana")
                        .HasColumnType("float");

                    b.Property<double>("ResistanceValue")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("FightingClasses");
                });

            modelBuilder.Entity("Domain.Entities.Game.Units.Hero", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("ArmorValue")
                        .HasColumnType("float");

                    b.Property<double>("AttackPower")
                        .HasColumnType("float");

                    b.Property<string>("ClassType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("CritChance")
                        .HasColumnType("float");

                    b.Property<double>("CurrentArmorValue")
                        .HasColumnType("float");

                    b.Property<double>("CurrentAttackPower")
                        .HasColumnType("float");

                    b.Property<double>("CurrentCritChance")
                        .HasColumnType("float");

                    b.Property<double>("CurrentHP")
                        .HasColumnType("float");

                    b.Property<int>("CurrentHealthRegen")
                        .HasColumnType("int");

                    b.Property<double>("CurrentMagicPower")
                        .HasColumnType("float");

                    b.Property<double>("CurrentMana")
                        .HasColumnType("float");

                    b.Property<int>("CurrentManaRegen")
                        .HasColumnType("int");

                    b.Property<double>("CurrentResistanceValue")
                        .HasColumnType("float");

                    b.Property<int>("Energy")
                        .HasColumnType("int");

                    b.Property<string>("EquipmentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FightingClassId")
                        .HasColumnType("int");

                    b.Property<int>("GearScore")
                        .HasColumnType("int");

                    b.Property<int>("GoldAmount")
                        .HasColumnType("int");

                    b.Property<int>("HealthRegen")
                        .HasColumnType("int");

                    b.Property<string>("IconURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InventoryId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<double>("MagicPower")
                        .HasColumnType("float");

                    b.Property<int>("ManaRegen")
                        .HasColumnType("int");

                    b.Property<int>("Mastery")
                        .HasColumnType("int");

                    b.Property<double>("MaxHP")
                        .HasColumnType("float");

                    b.Property<double>("MaxMana")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProfessionEnergy")
                        .HasColumnType("int");

                    b.Property<int?>("ProfessionId")
                        .HasColumnType("int");

                    b.Property<int>("ProfessionLevel")
                        .HasColumnType("int");

                    b.Property<double>("ProffesionXP")
                        .HasColumnType("float");

                    b.Property<double>("ProffesionXPCap")
                        .HasColumnType("float");

                    b.Property<string>("Race")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ResistanceValue")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("XP")
                        .HasColumnType("float");

                    b.Property<double>("XPCap")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("FightingClassId");

                    b.HasIndex("ProfessionId");

                    b.HasIndex("UserId");

                    b.ToTable("Heroes");
                });

            modelBuilder.Entity("Domain.Entities.Game.Units.Monster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("ArmorValue")
                        .HasColumnType("float");

                    b.Property<double>("AttackPower")
                        .HasColumnType("float");

                    b.Property<double>("CritChance")
                        .HasColumnType("float");

                    b.Property<double>("CurrentArmorValue")
                        .HasColumnType("float");

                    b.Property<double>("CurrentAttackPower")
                        .HasColumnType("float");

                    b.Property<double>("CurrentCritChance")
                        .HasColumnType("float");

                    b.Property<double>("CurrentHP")
                        .HasColumnType("float");

                    b.Property<int>("CurrentHealthRegen")
                        .HasColumnType("int");

                    b.Property<double>("CurrentMagicPower")
                        .HasColumnType("float");

                    b.Property<double>("CurrentMana")
                        .HasColumnType("float");

                    b.Property<int>("CurrentManaRegen")
                        .HasColumnType("int");

                    b.Property<double>("CurrentResistanceValue")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HealthRegen")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<double>("MagicPower")
                        .HasColumnType("float");

                    b.Property<int>("ManaRegen")
                        .HasColumnType("int");

                    b.Property<double>("MaxHP")
                        .HasColumnType("float");

                    b.Property<double>("MaxMana")
                        .HasColumnType("float");

                    b.Property<int?>("MonsterRarityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ResistanceValue")
                        .HasColumnType("float");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Monsters");
                });

            modelBuilder.Entity("Domain.Entities.Game.Units.MonsterRarity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MonsterId")
                        .HasColumnType("int");

                    b.Property<string>("MonsterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rarity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("StatAmplifier")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("MonsterId")
                        .IsUnique()
                        .HasFilter("[MonsterId] IS NOT NULL");

                    b.ToTable("MonstersRarities");
                });

            modelBuilder.Entity("Domain.Entities.Game.Units.Profession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Bonus")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProffesionZone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Professions");
                });

            modelBuilder.Entity("Domain.Entities.Game.Units.Spell", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClassType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ManaRequirment")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Spells");
                });

            modelBuilder.Entity("Domain.Entities.Moderation.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<DateTime>("SentOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Stars")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("Domain.Entities.Moderation.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReportedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SentOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Stars")
                        .HasColumnType("int");

                    b.Property<string>("TopicId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("MessageId");

                    b.HasIndex("TopicId");

                    b.HasIndex("UserId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Domain.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Domain.Entities.Common.AppUser", b =>
                {
                    b.HasOne("Domain.Entities.Common.AppUser", "Friend")
                        .WithMany("Friends")
                        .HasForeignKey("FriendId");

                    b.HasOne("Domain.Entities.Common.Social.Status", null)
                        .WithMany("Users")
                        .HasForeignKey("StatusId");
                });

            modelBuilder.Entity("Domain.Entities.Common.Social.Comment", b =>
                {
                    b.HasOne("Domain.Entities.Common.Social.Comment", "Reply")
                        .WithMany("Replies")
                        .HasForeignKey("ReplyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Common.Social.Topic", "Topic")
                        .WithMany("Comments")
                        .HasForeignKey("TopicId");

                    b.HasOne("Domain.Entities.Common.AppUser", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Domain.Entities.Common.Social.FriendRequest", b =>
                {
                    b.HasOne("Domain.Entities.Common.AppUser", "User")
                        .WithMany("FriendRequests")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Domain.Entities.Common.Social.Message", b =>
                {
                    b.HasOne("Domain.Entities.Common.AppUser", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Domain.Entities.Common.Social.Notification", b =>
                {
                    b.HasOne("Domain.Entities.Common.AppUser", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Domain.Entities.Common.Social.Topic", b =>
                {
                    b.HasOne("Domain.Entities.Common.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Domain.Entities.Common.Social.UserStatus", b =>
                {
                    b.HasOne("Domain.Entities.Common.Social.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Common.AppUser", "User")
                        .WithOne("UserStatus")
                        .HasForeignKey("Domain.Entities.Common.Social.UserStatus", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Common.Social.UserTopics", b =>
                {
                    b.HasOne("Domain.Entities.Common.Social.Topic", "Topic")
                        .WithMany("UserTopics")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Common.AppUser", "User")
                        .WithMany("UserTopics")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Game.Items.Equipment", b =>
                {
                    b.HasOne("Domain.Entities.Game.Units.Hero", "Hero")
                        .WithOne("Equipment")
                        .HasForeignKey("Domain.Entities.Game.Items.Equipment", "HeroId");
                });

            modelBuilder.Entity("Domain.Entities.Game.Items.Inventory", b =>
                {
                    b.HasOne("Domain.Entities.Game.Units.Hero", "Hero")
                        .WithOne("Inventory")
                        .HasForeignKey("Domain.Entities.Game.Items.Inventory", "HeroId");
                });

            modelBuilder.Entity("Domain.Entities.Game.Items.ManyToMany.Equipments.ArmorEquipment", b =>
                {
                    b.HasOne("Domain.Entities.Game.Items.Armor", "Armor")
                        .WithMany("ArmorEquipments")
                        .HasForeignKey("ArmorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Game.Items.Equipment", "Equipment")
                        .WithMany("ArmorEquipments")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Game.Items.ManyToMany.Equipments.TrinketEquipment", b =>
                {
                    b.HasOne("Domain.Entities.Game.Items.Equipment", "Equipment")
                        .WithMany("TrinketEquipments")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Game.Items.Trinket", "Trinket")
                        .WithMany("TrinketEquipments")
                        .HasForeignKey("TrinketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Game.Items.ManyToMany.Equipments.WeaponEquipment", b =>
                {
                    b.HasOne("Domain.Entities.Game.Items.Equipment", "Equipment")
                        .WithMany("WeaponEquipments")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Game.Items.Weapon", "Weapon")
                        .WithMany("WeaponEquipments")
                        .HasForeignKey("WeaponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Game.Items.ManyToMany.Inventories.ArmorInventory", b =>
                {
                    b.HasOne("Domain.Entities.Game.Items.Armor", "Armor")
                        .WithMany("ArmorInventories")
                        .HasForeignKey("ArmorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Game.Items.Inventory", "Inventory")
                        .WithMany("ArmorInventories")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Game.Items.ManyToMany.Inventories.ConsumeableInventory", b =>
                {
                    b.HasOne("Domain.Entities.Game.Items.Consumeable", "Consumeable")
                        .WithMany("ConsumeableInventories")
                        .HasForeignKey("ConsumeableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Game.Items.Inventory", "Inventory")
                        .WithMany("ConsumeableInventories")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Game.Items.ManyToMany.Inventories.MaterialInventory", b =>
                {
                    b.HasOne("Domain.Entities.Game.Items.Inventory", "Inventory")
                        .WithMany("MaterialInventories")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Game.Items.Material", "Material")
                        .WithMany("MaterialInventories")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Game.Items.ManyToMany.Inventories.ToolInventory", b =>
                {
                    b.HasOne("Domain.Entities.Game.Items.Inventory", "Inventory")
                        .WithMany("ToolInventories")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Game.Items.Tool", "Tool")
                        .WithMany("ToolInventories")
                        .HasForeignKey("ToolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Game.Items.ManyToMany.Inventories.TreasureInventory", b =>
                {
                    b.HasOne("Domain.Entities.Game.Items.Inventory", "Inventory")
                        .WithMany("TreasureInventories")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Game.Items.Treasure", "Treasure")
                        .WithMany("TreasureInventories")
                        .HasForeignKey("TreasureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Game.Items.ManyToMany.Inventories.TreasureKeyInventory", b =>
                {
                    b.HasOne("Domain.Entities.Game.Items.Inventory", "Inventory")
                        .WithMany("TreasureKeyInventories")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Game.Items.TreasureKey", "TreasureKey")
                        .WithMany("TreasureKeyInventories")
                        .HasForeignKey("TreasureKeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Game.Items.ManyToMany.Inventories.TrinketInventory", b =>
                {
                    b.HasOne("Domain.Entities.Game.Items.Inventory", "Inventory")
                        .WithMany("TrinketInventories")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Game.Items.Trinket", "Trinket")
                        .WithMany("TrinketInventories")
                        .HasForeignKey("TrinketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Game.Items.ManyToMany.Inventories.WeaponInventory", b =>
                {
                    b.HasOne("Domain.Entities.Game.Items.Inventory", "Inventory")
                        .WithMany("WeaponInventories")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Game.Items.Weapon", "Weapon")
                        .WithMany("WeaponInventories")
                        .HasForeignKey("WeaponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Game.Items.Material", b =>
                {
                    b.HasOne("Domain.Entities.Game.Items.Tool", "Tool")
                        .WithMany("Materials")
                        .HasForeignKey("ToolId");
                });

            modelBuilder.Entity("Domain.Entities.Game.Units.EnergyChanges", b =>
                {
                    b.HasOne("Domain.Entities.Game.Units.Hero", "Hero")
                        .WithMany("EnergyChanges")
                        .HasForeignKey("HeroId");
                });

            modelBuilder.Entity("Domain.Entities.Game.Units.Hero", b =>
                {
                    b.HasOne("Domain.Entities.Game.Units.FightingClass", "FightingClass")
                        .WithMany("Heroes")
                        .HasForeignKey("FightingClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Game.Units.Profession", "Profession")
                        .WithMany("Heroes")
                        .HasForeignKey("ProfessionId");

                    b.HasOne("Domain.Entities.Common.AppUser", "User")
                        .WithMany("Heroes")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Domain.Entities.Game.Units.MonsterRarity", b =>
                {
                    b.HasOne("Domain.Entities.Game.Units.Monster", "Monster")
                        .WithOne("MonsterRarity")
                        .HasForeignKey("Domain.Entities.Game.Units.MonsterRarity", "MonsterId");
                });

            modelBuilder.Entity("Domain.Entities.Moderation.Feedback", b =>
                {
                    b.HasOne("Domain.Entities.Common.AppUser", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Domain.Entities.Moderation.Ticket", b =>
                {
                    b.HasOne("Domain.Entities.Common.Social.Comment", "Comment")
                        .WithMany("Tickets")
                        .HasForeignKey("CommentId");

                    b.HasOne("Domain.Entities.Common.Social.Message", "Message")
                        .WithMany("Tickets")
                        .HasForeignKey("MessageId");

                    b.HasOne("Domain.Entities.Common.Social.Topic", "Topic")
                        .WithMany("Tickets")
                        .HasForeignKey("TopicId");

                    b.HasOne("Domain.Entities.Common.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Domain.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Entities.Common.AppUser", null)
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Entities.Common.AppUser", null)
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Domain.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Common.AppUser", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Entities.Common.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
