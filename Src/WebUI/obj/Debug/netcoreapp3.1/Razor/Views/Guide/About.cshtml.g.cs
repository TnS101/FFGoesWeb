#pragma checksum "C:\Users\PC\Desktop\FFGoesWeb\Src\WebUI\Views\Guide\About.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "cb36e5b4889b1f74a7e1bccd180e716a31845b78"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Guide_About), @"mvc.1.0.view", @"/Views/Guide/About.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\PC\Desktop\FFGoesWeb\Src\WebUI\Views\_ViewImports.cshtml"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\PC\Desktop\FFGoesWeb\Src\WebUI\Views\_ViewImports.cshtml"
using WebUI.Areas.Identity;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\PC\Desktop\FFGoesWeb\Src\WebUI\Views\_ViewImports.cshtml"
using Domain.Entities.Common;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\PC\Desktop\FFGoesWeb\Src\WebUI\Views\_ViewImports.cshtml"
using Application.GameCQ.Monsters.Queries.GetAllMonstersQuery;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"cb36e5b4889b1f74a7e1bccd180e716a31845b78", @"/Views/Guide/About.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"72de99cefb048e3e38636f6b45588b33a393a074", @"/Views/_ViewImports.cshtml")]
    public class Views_Guide_About : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("name", "_WorldNavBar", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-controller", "Unit", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-action", "Create", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/images/Warrior-Icon.png"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("alt", new global::Microsoft.AspNetCore.Html.HtmlString("Warrior"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("width", new global::Microsoft.AspNetCore.Html.HtmlString("60"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("height", new global::Microsoft.AspNetCore.Html.HtmlString("60"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_7 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/images/Rogue-Icon.png"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_8 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("alt", new global::Microsoft.AspNetCore.Html.HtmlString("Rogue"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_9 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/images/Hunter-Icon.png"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_10 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("alt", new global::Microsoft.AspNetCore.Html.HtmlString("Hunter"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_11 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/images/MageIcon.png"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_12 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("alt", new global::Microsoft.AspNetCore.Html.HtmlString("Mage"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_13 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/images/Druid-Icon.png"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_14 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("alt", new global::Microsoft.AspNetCore.Html.HtmlString("Naturalist"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_15 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/images/Necroid-Icon.png"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_16 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("alt", new global::Microsoft.AspNetCore.Html.HtmlString("Necroid"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_17 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/images/Paladin-Icon.png"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_18 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("alt", new global::Microsoft.AspNetCore.Html.HtmlString("Paladin"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_19 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/images/Priest-Icon.png"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_20 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("alt", new global::Microsoft.AspNetCore.Html.HtmlString("Priest"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_21 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/images/Shaman-Icon.png"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_22 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("alt", new global::Microsoft.AspNetCore.Html.HtmlString("Shaman"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_23 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("name", "_Footer", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_24 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("primary-background-color"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_PartialTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("<!DOCTYPE html>\r\n\r\n<html class=\"primary-background-color\">\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "cb36e5b4889b1f74a7e1bccd180e716a31845b7812690", async() => {
                WriteLiteral("\r\n    <meta name=\"viewport\" content=\"width=device-width\" />\r\n    <title>Guide</title>\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("partial", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "cb36e5b4889b1f74a7e1bccd180e716a31845b7813046", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_PartialTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_PartialTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_PartialTagHelper.Name = (string)__tagHelperAttribute_0.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "cb36e5b4889b1f74a7e1bccd180e716a31845b7814932", async() => {
                WriteLiteral(@"
    <div class=""has-text-align-center"">
        <h1 class=""secondary-font-color"">Welcome to the Main Guide!</h1>
        <div class=""item-padding"">
            <hr />
            <p class=""has-large-font-size main-font-color"">
                Navigation : <a href=""#Game""><i class=""fas fa-gamepad""></i>Game</a>
                <a href=""#Social""><i class=""fas fa-users""></i>Social</a>
                <a href=""#Rules""><i class=""fas fa-exclamation-triangle""></i>Rules</a>
                <a href=""#Rewards""><i class=""fas fa-gem""></i>Rewards</a>
            </p>
            <hr />
        </div>
        <br />
        <div class=""aligncenter"">
            <div class=""item-padding aligncenter"">
                <p class=""has-large-font-size main-font-color""><i class=""fas fa-book main-font-color""></i> Main Information</p>
                <hr />
                <p class=""main-font-color has-normal-font-size"">
                    Before we jump into any kind of information about the game itself, it woul");
                WriteLiteral(@"d be nice
                    if we would know something about the website as a construct/project (not really, just filling blank space). <b>Final Fantasy Tryout</b>
                    in it's origin was just a simple console application, that used to be an exercise for the developer's
                    programming courses. The project start date was July / 2019 and it's development process was about 2-3 months.
                    But the project was actually far from done. After a while, it Merged into <b>Final Fantasy Tryout Goes Web</b>(FF Goes Web for short)
                    by adding website functionality and some actual visualization of the game content. At this state, the game is just a fan-reproduction of the first
                    expansion of Final Fantasy, but there is a lot of distinctive content that wait's to see light. Like Final Fantasy, this game type is RPG, but with an
                    integrated <a href=""#Social""><em>Social System</em></a>, which means its something lik");
                WriteLiteral(@"e a Gaming Facebook(not really though). The graphical content currently
                    is NOT my possession and is NOT used for commercial uses, but as mentioned above, content will be added.
                </p>
            </div>
            <br />
            <div id=""Game"" class=""item-padding"">
                <p class=""has-large-font-size main-font-color""><i class=""fas fa-book main-font-color""></i> Game Guide</p>
                <hr />
                <p class=""has-normal-font-size main-font-color"">
                    Sweet! We can finally see what the game is actually about after all that reading (I know you haven't read anything from above).
                    In order to that, we must segregate the content into a few categories : <a href=""#Basics""><em>Basics</em></a>,
                    <a href=""#Spells""><em>Spells</em></a>,
                    <a href=""#Classes""><em>Classes</em></a>,
                    <a href=""#Items""><em>Items</em></a>,
                    <a href=""#Crafting""");
                WriteLiteral(@"><em>Crafting</em></a>,
                    <a href=""#Professions""><em>Professions</em></a>,
                    <a href=""#PvP""><em>PvP</em></a>,
                    <a href=""#Shops""><em>Shops and Auctions</em></a> and some sneakpeaks to the
                    <a href=""#FutureContent""><em>Future Content</em></a>.
                </p>
                <br />
                <div id=""Basics"" class=""item-padding"">
                    <p class=""has-large-font-size main-font-color""><i class=""fas fa-file main-font-color""></i> Basics</p>
                    <hr />
                    <div>
                        <p class=""has-normal-font-size main-font-color"">
                            Great! We are finally getting to the fun part! The game logic is made to be as simple as a rock : you hit and you get hit (don't hit rocks).
                            These actions happen every Turn since the game is Turn-Based. In order to experience this marvelous joy (without animations and awesome graphics tho...");
                WriteLiteral("),\r\n                            you must ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("a", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "cb36e5b4889b1f74a7e1bccd180e716a31845b7819544", async() => {
                    WriteLiteral("<em>Create</em>");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.Controller = (string)__tagHelperAttribute_1.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
                __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.Action = (string)__tagHelperAttribute_2.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@" a Hero.
                            Explained in details, a Hero has <i class=""far fa-heart secondary-font-color"">Health</i>,
                            <i class=""fas fa-diagnoses secondary-font-color"">Mana</i>, <i class=""fas fa-khanda secondary-font-color"">Attack Power</i>,
                            <i class=""fas fa-magic secondary-font-color"">Magic Power</i>, <i class=""fas fa-shield-alt secondary-font-color"">Armor</i>,
                            <i class=""fas fa-hat-wizard secondary-font-color"">Magical Resistance</i>, <i class=""fas fa-heartbeat secondary-font-color"">Health Regeneration</i>,
                            <i class=""fas fa-hand-holding-water secondary-font-color"">Mana Regeneration</i>, <i class=""fas fa-certificate secondary-font-color"">Level</i>,
                            <i class=""fab fa-gripfire secondary-font-color"">Critical Chance</i>,  <i class=""fas fa-coins secondary-font-color"">Gold</i> and
                            <i class=""fas fa-bolt secondary-font-color"">Energy</i>
 ");
                WriteLiteral(@"                           <br />
                            It's obvious that you need Health to live and that Health Regeneration recovers Health, but let's look up close about each attribute:
                            <br />
                        <p class=""has-normal-font-size main-font-color"">
                            <i class=""far fa-heart main-font-color"">Health</i> is Regenerated every turn in Battle and every 4 minutes out of Battle by 10%.
                            When your Health reaches zero, you Die and lose half of your Gold. You can use various
                            <a href=""#Items""><em>Consumeable Items</em></a> in order to regen health exclusively.
                            The Primary Stat for Health is Stamina.
                        </p>
                        <div class=""item-padding"">
                            <hr />
                            <p class=""item-padding has-normal-font-size  main-font-color"">
                                <i class=""fas fa");
                WriteLiteral(@"-diagnoses main-font-color"">Mana</i> is Regenerated every turn in Battle and every 4 minutes out of Battle by 10%.
                                Mana is used to cast <a href=""#Spells""><em>Spells</em></a>. Note that Spells can do both Physical and Magical Damage depending on your stats.
                                The Primary Stat for Mana is Intellect and the Primary Stat for Mana Regeneration is Spirit.
                            </p>
                        </div>
                        <div class=""item-padding"">
                            <hr />
                            <p class=""item-padding has-normal-font-size  main-font-color"">
                                <i class=""fas fa-khanda main-font-color"">Attack Power</i> is used to deal Physical Damage to your Enemy.
                                As the formula follows : Your Attack - Enemy's Armor = Damage Dealt.
                                The Primary Stats for Attack Power are Strength and Agility.
                           ");
                WriteLiteral(@" </p>
                        </div>
                        <div class=""item-padding"">
                            <hr />
                            <p class=""item-padding has-normal-font-size  main-font-color"">
                                <i class=""fas fa-magic main-font-color"">Magic Power</i> is used to deal Magical Damage to your Enemy.
                                Same as your Attack but : Your Magic Power - Enemy's Ressistance = Damage Dealt.
                                The Primary Stat for Magic Power is Intellect.
                            </p>
                        </div>

                        <div class=""item-padding"">
                            <hr />
                            <p class=""item-padding has-normal-font-size main-font-color"">
                                <i class=""fas fa-shield-alt main-font-color"">Armor</i> is used to Protect yourself from Physical Damage.
                                Something like this : Enemy's Attack - Your Armor = Damage ");
                WriteLiteral(@"Taken (with protection).
                                Important! If your Armor is higher than the Enemy's Attack, you will Block the Attack, meaming you won't recieve any Damage from it.
                                This also means that your Current Armor will be decreased by a percent.
                            </p>
                        </div>

                        <div class=""item-padding"">
                            <hr />
                            <p class=""item-padding has-normal-font-size main-font-color"">
                                <i class=""fas fa-hat-wizard main-font-color"">Magical Resistance</i> is used to Protect yourself from Magical Damage.
                                Like the Armor but a little different : Enemy's Magic Power - Your Ressistance = Damage Taken (with protection).
                                Important! If your Ressistance is higher than the Enemy's Magic Power, you will Absorb the Spell, meaming you won't recieve any Damage from it.
       ");
                WriteLiteral(@"                         This also means that your Current Ressistance will be decreased by a percent.
                            </p>
                        </div>

                        <div class=""item-padding"">
                            <hr />
                            <p class=""item-padding has-normal-font-size main-font-color"">
                                <i class=""fas fa-certificate main-font-color"">Level</i> determines your Hero's Power.
                                A Level is achieved when a XP condition is satisfied (when you have more experience than your current maximum... like in, uhm, all games).
                                Any bonus XP points for the previous Level will be added to the next, example : I have 90 points, I am Level 1 and I need 10 more to Level Up!
                                I Kill a Monster that rewards me 13 XP points, which means that I will be Level 2 with 3 XP points.
                                In addition : Every time you Level Up you");
                WriteLiteral(@" will have the opportunity to choose following points : Strength, Intellect, Spirit, Stamina or Agility.
                                You can find more information about the following stats in the <a href=""#Items""><em>Items</em></a> section.
                            </p>
                        </div>

                        <div class=""item-padding"">
                            <hr />
                            <p class=""item-padding has-normal-font-size main-font-color"">
                                <i class=""fab fa-gripfire main-font-color"">Critical Chance</i> is the persistency of landing a Critical Strike.
                                A Critical Strike deals Double the Damage of the initial Attack.
                                Note : Only Normal Attacks can Crit. For now.
                                The Primary Stat for Critical Chance is Agility.
                            </p>
                        </div>

                        <div class=""item-padding"">
      ");
                WriteLiteral(@"                      <hr />
                            <p class=""item-padding has-normal-font-size main-font-color"">
                                <i class=""fas fa-coins main-font-color"">Gold</i> is the Main Currency of the game.
                                It can be obtained through killing Monsters, Battling Players, Selling Items in the Shop / Auction e.t.c.
                                It can be used as well buying various Items, which can increase your Hero Growth drastically.
                            </p>
                        </div>

                        <div class=""item-padding"">
                            <hr />
                            <p class=""item-padding has-normal-font-size main-font-color"">
                                <i class=""fas fa-bolt main-font-color"">Energy</i> is our last and one of the most valuable attributes.
                                Without Energy, in short, you can't progress.
                                There are 3 types of Energy");
                WriteLiteral(@" : the Common Energy (the electric icon) which has 30 points and regenerates every 4 min,
                                Crafting Energy (the hammer icon) which has 10 points and also regenerates every 4 min
                                and PvP Energy (the raised fist icon) which has 15 points and regenerates every 8 min.
                                In the next sections we will talk about Energies in bigger detail.
                            </p>
                        </div>

                    </div>
                </div>
                <br />
                <div id=""Spells"" class=""item-padding"">
                    <p class=""has-large-font-size main-font-color""><i class=""fas fa-file main-font-color""></i> Spells</p>
                    <hr />
                    <p class=""has-normal-font-size main-font-color"">
                        Spells are the reason you have Mana : Dealing tons of damage in one hit, Healing yourself constantly or just making the
                        Ene");
                WriteLiteral(@"my's Attacks absolutely ineffective. There are a few Main Spell Types : Damage Spells (dividing into Physical and Magical),
                        Healing Spells and Buffs. Damage Spells have the same purpose as Normal Attacks, Healing Spells speak for themselves, but what about
                        Buffs? Well, Buffs can be explained pretty simple : They increase one (or more) of your Primary Attributes values for the rest of the fight.
                        Buffs (Like Damage and Healing Spells) are standalone Spells that require Mana to cast.
                        In addition each Spell can have an Effect that occurs when the Spell is casted.
                        Effects can have the same purpose as Damage Spells, Healing Spells or Buffs, but their effectiveness is comparatively lower in order to keep
                        everything balanced. Buffs and Effects can have possitive and negative (DeBuffs / Negative Effects) side which can target either you, or your Enemy.
                 ");
                WriteLiteral(@"       Note that NOT all Spells require Mana and some of them even require different Attributes as casting Resource.
                    </p>
                </div>
                <br />
                <div id=""Classes"" class=""item-padding"">
                    <p class=""has-large-font-size main-font-color""><i class=""fas fa-file main-font-color""></i> Classes</p>
                    <hr />
                    <p class=""has-normal-font-size main-font-color"">
                        Classes are the diversity of your Hero with the following factors included :
                        Damage Contribution, Durability Contribution, Utility Contribution, Types of Equipment (<a href=""#Items""><em>Items</em></a>) and so on.
                        Currently, there are 9 Classes, but in the future more will be included (and the current will be modified).
                        They are designed in a way that there isn't a specific way of playing them (they basically don't have a META).
                     ");
                WriteLiteral(@"   Long story short, you have a choice of playing your favourite class with at least 2 varieties of play style!
                        Without further ado, lets meet our Classes :
                    <p class=""has-normal-font-size main-font-color"">
                        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "cb36e5b4889b1f74a7e1bccd180e716a31845b7833033", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
                        <br />
                        Warrior
                        <br />
                        is your typical Physical Damage dealer : His main source of Damage comes from Normal Attacks, wears Metal Armor
                        and he does not die fast. His Primary Stat is Stength. The Weapons used by the Warrior are Sword, Hammer and Club.

                        The Warrior uses the following Spells :
                        <ul class=""item-padding"" style=""list-style:none"">
                            <li class=""has-normal-font-size main-font-color"">
                                <i class=""fas fa-sun main-font-color""></i> Head Smash - Damage Spell
                                <br />
                                Damage : Physical (high), Cost : Mana (moderate)
                                <br />
                                Bonus Negative Effect : Health (very low), Target : Self
                            </li>
                            <li class=");
                WriteLiteral(@"""has-normal-font-size main-font-color"">
                                <i class=""fas fa-sun main-font-color item-padding""></i> Hyper Strength - Physical Damage Buff
                                <br />
                                Power (moderate), Cost : Mana (moderate), Target : Self
                            </li>
                            <li class=""has-normal-font-size main-font-color item-padding"">
                                <i class=""fas fa-sun main-font-color""></i> Raging Blow - Damage Spell
                                <br />
                                Damage : Physical (moderate), Cost : Mana (low)
                                <br />
                                Bonus Effect : Mana Regen (very low)
                                <br />
                                Addition : Ignores a low amount of the Enemy's Armor
                            </li>
                            <li class=""has-normal-font-size main-font-color item-padding"">
             ");
                WriteLiteral(@"                   <i class=""fas fa-sun main-font-color""></i> Disarm - Physical Damage DeBuff
                                <br />
                                Power (moderate), Cost : Mana (moderate), Target : Enemy
                            </li>
                        </ul>
                        <br />
                        <hr />
                    </p>
                    <p class=""has-normal-font-size main-font-color"">
                        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "cb36e5b4889b1f74a7e1bccd180e716a31845b7836995", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_7);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_8);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
                        <br />
                        Rogue
                        <br />
                        is a cunning assassin that deals mainly Physical Damage and wears Leather Armor. His Primary Stat is Agility.
                        The Weapon used by the Rogue is a Dagger.

                        The Rogue uses the following Spells :
                        <br />
                        <ul class=""item-padding"" style=""list-style:none"">
                            <li class=""has-normal-font-size main-font-color"">
                                <i class=""fas fa-sun main-font-color""></i> Stab - Damage Spell
                                <br />
                                Damage : Physical (moderate), Cost : Mana (very low)
                                <br />
                                Bonus Effect : Attack Power (low)
                            </li>
                            <li class=""has-normal-font-size main-font-color item-padding"">
                  ");
                WriteLiteral(@"              <i class=""fas fa-sun main-font-color""></i> Poison Dagger - Damage Spell
                                <br />
                                Damage : Physical (low) + Magical (moderate), Cost : Mana (moderate)
                            </li>
                            <li class=""has-normal-font-size main-font-color item-padding"">
                                <i class=""fas fa-sun main-font-color""></i> Poison Dagger - Damage Spell
                                <br />
                                Damage : Physical (low) + Magical (moderate), Cost : Mana (moderate)
                            </li>
                            <li class=""has-normal-font-size main-font-color item-padding"">
                                <i class=""fas fa-sun main-font-color""></i> Evasion - Armor Buff
                                <br />
                                Power (high) , Cost : Mana (moderate)
                                <br />
                                Positive Effec");
                WriteLiteral(@"t : Mana Regem (moderate)
                            </li>
                            <li class=""has-normal-font-size main-font-color item-padding"">
                                <i class=""fas fa-sun main-font-color""></i> Thievery - Gold Buff
                                <br />
                                Power (moderate) , Cost : Mana (high)
                            </li>
                        </ul>
                        <br />
                        <hr />
                    </p>
                    <p class=""has-normal-font-size main-font-color"">
                        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "cb36e5b4889b1f74a7e1bccd180e716a31845b7841098", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_9);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_10);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
                        <br />
                        Hunter

                        <br />
                        is a swift ranger that mainly consists in Physical Damage dealing and wears Leather Armor. His Primary Stat is Agility.
                        The Weapon used by the Hunter is a Bow.

                        The Hunter uses the following Spells :

                        <ul class=""item-padding"" style=""list-style:none"">
                            <li class=""has-normal-font-size main-font-color"">
                                <i class=""fas fa-sun main-font-color""></i> Hasting Arrow - Damage Spell
                                <br />
                                Damage : Physical (moderate), Cost : Mana (low)
                                <br />
                                Bonus Effect : Critical Chance (low)
                            </li>
                            <li class=""has-normal-font-size main-font-color item-padding"">
                             ");
                WriteLiteral(@"   <i class=""fas fa-sun main-font-color""></i> Grass Hop - Armor Buff
                                <br />
                                Power (very high), Cost : Mana (high)
                            </li>
                            <li class=""has-normal-font-size main-font-color item-padding"">
                                <i class=""fas fa-sun main-font-color""></i> Poison Shot - Damage Spell
                                <br />
                                Damage : Physical (low) + Magical (moderate), Cost : Mana (moderate)
                                <br />
                                Addition : Ignores a moderate ammount of Enemy's Armor
                            </li>
                            <li class=""has-normal-font-size main-font-color item-padding"">
                                <i class=""fas fa-sun main-font-color""></i> Sharp Eye - Physical Damage Buff
                                <br />
                                Power (moderate), Cost : Mana (high");
                WriteLiteral(")\r\n                            </li>\r\n                        </ul>\r\n                        <br />\r\n                        <hr />\r\n                    </p>\r\n                    <p class=\"has-normal-font-size main-font-color\">\r\n                        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "cb36e5b4889b1f74a7e1bccd180e716a31845b7844852", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_11);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_12);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
                        <br />
                        Mage
                        <br />
                        is a skillful sorcerer that deals Magic Damage and wears Cloth Armor. His Primary Stat is Intellect.
                        The Weapons used by the Mage are Orb and Staff.

                        The Mage uses the following Spells :

                        <ul class=""item-padding"" style=""list-style:none"">
                            <li class=""has-normal-font-size main-font-color"">
                                <i class=""fas fa-sun main-font-color""></i> Water Ball - Damage Spell
                                <br />
                                Damage : Magical (moderate), Cost : Mana (moderate)
                                <br />
                                Bonus Effect : Mana Regen (high)
                            </li>
                            <li class=""has-normal-font-size main-font-color item-padding"">
                                <i class=""fas fa-");
                WriteLiteral(@"sun main-font-color""></i> Fire Ball - Damage Spell
                                <br />
                                Damage : Magical (moderate) + Enemy's Max Health (very low), Cost : Mana (moderate)
                                <br />
                                Bonus Negative Effect : Health Regen (very low), Target : Enemy
                                <br />
                                Addition : Ignores a low amount of the Enemy's Resistance
                            </li>
                            <li class=""has-normal-font-size main-font-color item-padding"">
                                <i class=""fas fa-sun main-font-color""></i> Mana Conversion - Mana Buff
                                <br />
                                Power (moderate) , Cost : Mana (none)
                                <br />
                                Bonus Negative Effect : Armor (low), Target : Self
                            </li>
                            <li class=""has-nor");
                WriteLiteral(@"mal-font-size main-font-color item-padding"">
                                <i class=""fas fa-sun main-font-color""></i> All Out Blast - Damage Spell
                                <br />
                                Damage : Magical (very high) , Cost : Mana (very high)
                                <br />
                                Bonus Negative Effect : Mana Regen (low), Target : Self
                                <br />
                                Addition : Ignores the full amount of the Enemy's Resistance.
                            </li>
                        </ul>
                        <br />
                        <hr />
                    </p>
                    <p class=""has-normal-font-size main-font-color"">
                        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "cb36e5b4889b1f74a7e1bccd180e716a31845b7849134", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
                        <br />
                        Naturalist
                        <br />
                        is the protector of the wild which does Magical Damage and Healing. Wears Leather Armor and
                        his Primary Stat is Spirit. The Weapons used by the Naturalist are Branch, Orb and Staff.

                        The Naturalist uses the following Spells :

                        <ul class=""item-padding"" style=""list-style:none"">
                            <li class=""has-normal-font-size main-font-color"">
                                <i class=""fas fa-sun main-font-color""></i> Nature's Touch - Healing Spell
                                <br />
                                Power : Magical (moderate) , Cost : Mana (moderate)
                                <br />
                                Bonus Effect : Armor (low)
                            </li>
                            <li class=""has-normal-font-size main-font-color item-padding"">
     ");
                WriteLiteral(@"                           <i class=""fas fa-sun main-font-color""></i> Thorn Blast - Damage Spell
                                <br />
                                Damage : Magical (moderate) , Cost : Mana (moderate)
                                <br />
                                Bonus Negative Effect : Armor (moderate), Target : Enemy
                            </li>
                            <li class=""has-normal-font-size main-font-color item-padding"">
                                <i class=""fas fa-sun main-font-color""></i> Nature's Gift - Health Regen Buff
                                <br />
                                Power (moderate), Cost : Mana (none)
                                <br />
                                Bonus Effect : Magic Power (very low), Target : Self
                                <br />
                                Bonus Negative Effect : Health (very low), Target : Self
                            </li>
                            <li ");
                WriteLiteral(@"class=""has-normal-font-size main-font-color item-padding"">
                                <i class=""fas fa-sun main-font-color""></i> Pouring Rain - Mana Buff
                                <br />
                                Power (moderate), Cost : Mana (very low)
                                <br />
                                Bonus Negative Effect : Mana Regen (low), Target : Self
                            </li>
                        </ul>
                        <br />
                        <hr />
                    </p>
                    <p class=""has-normal-font-size main-font-color"">
                        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "cb36e5b4889b1f74a7e1bccd180e716a31845b7853277", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
                        <br />
                        Necroid
                        <br />
                        is the raiser of the dead which does Magical Damage and Healing. Wears Cloth Armor and his
                        Primary Stat is Intellect. The Weapons used by the Necroid are Skull and Staff.

                        The Necroid uses the following Spells :
                        <ul class=""item-padding"" style=""list-style:none"">
                            <li class=""has-normal-font-size main-font-color"">
                                <i class=""fas fa-sun main-font-color""></i> Shadow Touch - Damage Spell
                                <br />
                                Damage : Current Mana (low) + Enemy's Max Health (very low) , Cost : Mana (moderate)
                                <br />
                                Bonus Negative Effect : Resistance (low), Target : Enemy
                            </li>
                            <li class=""has-normal-font-s");
                WriteLiteral(@"ize main-font-color item-padding"">
                                <i class=""fas fa-sun main-font-color""></i> Life Syphon - Damage Spell
                                <br />
                                Damage : Current Magic Power (moderate) + Enemy's Max Health (low) , Cost : Mana (moderate)
                                <br />
                                Bonus Effect : Health (low), Target : Self
                            </li>
                            <li class=""has-normal-font-size main-font-color item-padding"">
                                <i class=""fas fa-sun main-font-color""></i> Arcane Bane - Magic Power DeBuff
                                <br />
                                Power (moderate), Cost : Mana (moderate)
                            </li>
                            <li class=""has-normal-font-size main-font-color item-padding"">
                                <i class=""fas fa-sun main-font-color""></i> Mutual Darkness - Damage Spell
                    ");
                WriteLiteral(@"            <br />
                                Damage : Your Max Health (moderate), Cost : Mana (none)
                                <br />
                                Bonus Negative Effect : Health (low), Target : Self
                            </li>
                        </ul>
                        <br />
                        <hr />
                    </p>
                    <p class=""has-normal-font-size main-font-color"">
                        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "cb36e5b4889b1f74a7e1bccd180e716a31845b7857250", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_17);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
                        <br />
                        Paladin
                        <br />
                        is the guardian of the light which does Magical and Physical Damage, and also does Healing. Wears Metal Armor and
                        his Primary Stat is Strength. The Weapons used by the Paladin are Hammer and Sword.

                        The Paladin uses the following Spells :
                        <ul class=""item-padding"" style=""list-style:none"">
                            <li class=""has-normal-font-size main-font-color"">
                                <i class=""fas fa-sun main-font-color""></i> Holy Strike - Damage Spell
                                <br />
                                Damage : Physical (moderate), Cost : Mana (low)
                                <br />
                                Bonus Effect : Magic Power (very low), Target : Self
                                <br />
                                Addition : Ignores a moderate amou");
                WriteLiteral(@"nt of the Enemy's Armor
                            </li>
                            <li class=""has-normal-font-size main-font-color item-padding"">
                                <i class=""fas fa-sun main-font-color""></i> Burning Light - Damage Spell
                                <br />
                                Damage : Magical (moderate), Cost : Mana (low)
                            </li>
                            <li class=""has-normal-font-size main-font-color item-padding"">
                                <i class=""fas fa-sun main-font-color""></i> Vicious Spell Guard - Resistance Buff
                                <br />
                                Power(high), Cost : Mana (moderate)
                            </li>
                            <li class=""has-normal-font-size main-font-color item-padding"">
                                <i class=""fas fa-sun main-font-color""></i> Divine Rune - Attack Power Buff
                                <br />
                      ");
                WriteLiteral(@"          Power(low), Cost : Mana (moderate)
                            </li>
                        </ul>
                        <br />
                        <hr />
                    </p>
                    <p class=""has-normal-font-size main-font-color"">
                        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "cb36e5b4889b1f74a7e1bccd180e716a31845b7861035", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_20);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
                        <br />
                        Priest
                        <br />
                        is the invoker of light which does Physical Damage and Healing. Wears Cloth Armor and his
                        Primary Stat is Spirit. The Weapons used by the Priest are Staff and Branch.

                        The Priest uses the following Spells :
                        <ul class=""item-padding"" style=""list-style:none"">
                            <li class=""has-normal-font-size main-font-color"">
                                <i class=""fas fa-sun main-font-color""></i> Holy Light - Healing Spell
                                <br />
                                Power : Magic Power (moderate) + Your Max Health (low), Cost : Mana (moderate)
                            </li>
                            <li class=""has-normal-font-size main-font-color item-padding"">
                                <i class=""fas fa-sun main-font-color""></i> Mana Drain - Mana Buff
        ");
                WriteLiteral(@"                        <br />
                                Power (moderate), Cost : Mana (very low)
                                <br />
                                Bonus Negative Effect : Mana (moderate), Target : Enemy
                            </li>
                            <li class=""has-normal-font-size main-font-color item-padding"">
                                <i class=""fas fa-sun main-font-color""></i> Staff Smash - Damage Spell
                                <br />
                                Damage : Physical (moderate), Cost : Mana (low)
                                <br />
                                Bonus Negative Effect : Armor (low), Target : Enemy
                            </li>
                            <li class=""has-normal-font-size main-font-color item-padding"">
                                <i class=""fas fa-sun main-font-color""></i> Blessing - Magic Power Buff
                                <br />
                                Power (mod");
                WriteLiteral(@"erate), Cost : Mana (moderate)
                                <br />
                                Bonus Effect : Health Regen (moderate)
                            </li>
                        </ul>
                        <br />
                        <hr />
                    </p>
                    <p class=""has-normal-font-size main-font-color"">
                        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "cb36e5b4889b1f74a7e1bccd180e716a31845b7864918", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_21);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_22);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
                        <br />
                        Shaman
                        <br />
                        is the elemental guide which does Physical and Magical Damage and also does Healing. Wears Metal Armor
                        and his Primary Stat is Stamina. The Weapons used by the Shaman are Club and Hammer.

                        The Shaman uses the following Spells :
                        <ul class=""item-padding"" style=""list-style:none"">
                            <li class=""has-normal-font-size main-font-color"">
                                <i class=""fas fa-sun main-font-color""></i> Thunder Strike - Damage Spell
                                <br />
                                Damage : Magic Power (moderate) + Attack Power (low), Cost : Mana (moderate)
                                <br />
                                Bonus Negative Effect : Resistance(moderate), Target : Enemy
                            </li>
                            <li class=""has-");
                WriteLiteral(@"normal-font-size main-font-color item-padding"">
                                <i class=""fas fa-sun main-font-color""></i> Earth Strike - Damage Spell
                                <br />
                                Damage : Attack Power (moderate) + Magic Power (low), Cost : Mana (moderate)
                                <br />
                                Bonus Effect : Health [Attack Power(moderate)], Target : Self
                            </li>
                            <li class=""has-normal-font-size main-font-color item-padding"">
                                <i class=""fas fa-sun main-font-color""></i> Flame Strike - Damage Spell
                                <br />
                                Damage : Attack Power (moderate), Cost : Mana (moderate)
                                <br />
                                Bonus Effect : Attack Power (low), Target : Self
                                <br />
                                Addition : Your Enemy will Defe");
                WriteLiteral(@"nd against this Spell with both Armor (half) and Resistance (half)
                            </li>
                            <li class=""has-normal-font-size main-font-color item-padding"">
                                <i class=""fas fa-sun main-font-color""></i> Water Strike - Damage Spell
                                <br />
                                Damage : Magic Power (moderate), Cost : Mana (moderate)
                                <br />
                                Bonus Effect : Mana Regen (moderate), Target : Self
                            </li>
                        </ul>
                        <br />
                    </p>
                </div>
                <br />
                <div id=""Items"" class=""item-padding"">
                    <p class=""has-large-font-size main-font-color""><i class=""fas fa-file main-font-color""></i> Items</p>
                    <hr />
                    <p class=""has-normal-font-size main-font-color"">
                        ");
                WriteLiteral(@"Items are essential for numerous things : Equipment, Auctionary, Crafting, Consuming e.t.c.
                        But like in the previous sections, we will split this one bit by bit.
                    </p>
                    <div class=""item-padding"">
                        <p class=""has-normal-font-size main-font-color"">
                            Let's start with the Equipment type. There are 3 Main types of Equipment : Weapon, Armor and Trinket.
                            Every type has some value of the Primary Stats (Strength, Stamina, Intellect, Agility, Spirit) and contains all of them.
                            Of course, Weapons and Armor differ from Trinkets, which have <em>only</em> the Primary Stats as Attributes.
                            Weapons have Attack Power, while Armor Parts have Armor Value and Resistance Value. Every Equipment Item has it's own
                            Primary Stat, depending of the Class that the Item is relating to. For example : If I get a Ma");
                WriteLiteral(@"ge Orb, it's Primary Stat will
                            be the same as the Mage's (Intellect). That means that the <em>value</em> of this Stat will be significantly higher. As for Weapon
                            Variations we already read in the previous article, but we haven't really talked about Armor or Trinkets. Well, we can put the Trinkets
                            aside instantly, because they are Universal for all Classes. Basically everyone can use any type of them without restriction. The interesting
                            part is the Armor Item Type. We have 7 variations (Helmet, Shoulders, Chestplate, Bracers, Gloves, Pants and Boots) with 3 sub-Types which
                            determine the Classes that can use the Items (Cloth, Leather, Metal). Like all other Items, Equipment ones can be either <a href=""#Crafting""><em>Crafted</em></a>
                            or <a href=""#Shops""><em>Bought</em></a>. Tools are a good example, but we will talk about that later.
      ");
                WriteLiteral(@"                  </p>
                        <br />
                        <p class=""has-normal-font-size main-font-color"">
                            Consumeable Items!... Wait. There isn't much to say about them. They are like in all other Games. You either Buy a potion or some
                            freshly baked loaf with a nice cold drink, or Craft it and you Regenerate a bunch of Health and Mana instantly!
                            Although, it is very important to see that Consumeables like potions can be used in Battle, while tasty fat burgers can't.
                            Well, that's technically all you need to know. <b>Moooooving on!</b>
                        </p>
                    </div>
                </div>
                <br />
                <div id=""Crafting"" class=""item-padding"">
                    <p class=""has-large-font-size main-font-color""><i class=""fas fa-file main-font-color""></i> Crafting</p>
                    <hr />
                    <p clas");
                WriteLiteral(@"s=""has-normal-font-size main-font-color"">
                        Finally! The section that all Mine<em>Craft</em>, Terraria, Don't Starve, World of War<em>Craft</em> and every other game that has
                        <em>Crafting</em> in it : child mol... Uh-um. Crafting. (Please Google and Domain Gods don't shut down the website. That was just a crappy joke).
                        Crafting consists in three grounding point : Professions, Materials and Tools. We will discuss every one of them, but first we need to know
                        how Crafting works (I bet 101% of you already know that, but let's just be sure) : You want to Craft an Item that requires a typical Profession
                        and Skill Level (let's say you already have those), requires some set of Materials and also a Tool / Setting (in most cases) to finish the job.
                        That's everything, right? Wrong. When all conditions for a Craftable Item are met, one point of our Crafting Energy will be tak");
                WriteLiteral(@"en (if we have any...
                        otherwise we won't be able to Craft). Just like your Normal Energy, Crafting Energy regenerates once every 4 minutes, but you can only have a
                        maximum of 10 points at a time. In addition : Some Craftable Items may require more Energy points, but all of them require a certain level of
                        <a href=""#Professions""><em>Profession Expertise</em></a> (Proffesion Skill Level). Keep in mind that there are different types of
                        Crafting and some of them DO NOT require Energy. Let's check them out.
                    </p>
                    <br />
                    <div class=""item-padding"">
                        <p class=""has-large-font-size main-font-color""><i class=""fas fa-file main-font-color""></i> Crafting Types</p>
                        <hr />
                        <p class=""has-normal-font-size main-font-color"">
                            There are 3 Basic Types of Crafting Operation");
                WriteLiteral(@"s : Refining, Constructing, Disolving and Recycling (this one is unlocked later on).
                        </p>
                        <div class=""item-padding"">
                            <p class=""has-large-font-size main-font-color"">
                                Lets start with <i class=""fas fa-poo main-font-color""></i> Refining.
                            </p>
                            <br />
                            <p class=""has-normal-font-size main-font-color"">
                                Refining consists in transforming a Raw Material into a Usable Crafting Ingredient. Let's say you got a Tree Log and want to make
                                Planks in order to Craft a Wooden Chair. The action you would perform in this case scenario would be <em>Refining</em>. It requires
                                <em>Tools</em> that are in Working Condition (aren't broken / Durability > 0). Like Energy, Tool's Durability is affected the same way.
                                ");
                WriteLiteral(@"Some Crafting Tasks may go easy on your Tool, while other can completely demolish it. In order to make things balanced, Tools are Buyable
                                (not that expensive), Repairable (by their respective Profession Craftsmen) and Upgradeable. Refining is the <em>First Step</em> of making
                                a blueprint alive and is made countless times during the Crafting process. That's why Refining DOES NOT require Energy to perform.
                            </p>
                            <br />
                            <hr />
                            <p class=""has-large-font-size main-font-color"">
                                Before we reveal the different Constructing processes, it's <b>Essential</b> for us to know what <i class=""fas fa-cut main-font-color""></i> Disolving is.
                            </p>
                            <br />
                            <p class=""has-normal-font-size main-font-color"">
                               ");
                WriteLiteral(@" Disolving means technically 'Breaking' Items into 2 or more sub-Materials that can be used in future Constructing or Refining.
                                Like Refining and Constructing it does require Tools for you to operate. Of course, Disolving works only ot Items that originally
                                have two or more Materials included in them. Example : I am gonna Disolve this Garden Shovel into Stick and Metal. Now I can use these
                                Materials to <em>Construct</em> a Metal Sword. Disolving DOES NOT require Energy to perform.
                            </p>
                            <br />
                            <hr />
                            <p class=""has-large-font-size main-font-color"">
                                <i class=""fas fa-hammer main-font-color""></i> Constructing
                            </p>
                            <br />
                            <p class=""has-normal-font-size main-font-color"">
               ");
                WriteLiteral(@"                 Constructing as a term can have many names : Forging, Knitting, Tailoring, Leatherworking e.t.c.
                                This is the final step before you can recieve the reward of being a <em>Crafter</em>. Constructing also requires Tools
                                but in order to get the job done, you need Working Space and / or additional Tools. For example : A Chef may need a
                                Cooking Furnace for some dishes and surely will need a Cutting Board to prepare the Ingredients. Working Spaces (like the Furnace)
                                are automatically included to your Profession Arsenal. You DO NOT need to buy them. All other Tools are included in the
                                <a href=""#Shops""><em>Shop</em></a>.
                            </p>
                        </div>
                    </div>
                </div>
                <br />
                <div id=""Professions"" class=""item-padding"">
                   ");
                WriteLiteral(@" <p class=""has-large-font-size main-font-color""><i class=""fas fa-file main-font-color""></i> Professions</p>
                    <hr />
                    <p class=""has-normal-font-size main-font-color"">
                        Professions divide into 2 main groups : Gatherers and Crafters. Yep. As it seems, only <em>Crafters</em> can <em>Craft</em>, but that's
                        not the whole story : Gatherers can't perform Constructing, but they can perform Refining and Disolving actions. Long story short, Crafters
                        use their Profession / Crafting Energy to make Items, while Gatherers use their Energy to collect the Materials / Ingredients. Of course, it's
                        a little more complex than that.
                    </p>
                    <br />
                    <br />
                    <div class=""item-padding"">
                        <p class=""has-large-font-size main-font-color""><i class=""fas fa-feather-alt main-font-color""></i> Gather Type P");
                WriteLiteral(@"rofessions</p>

                        <div class=""item-padding"">
                            <p class=""has-normal-font-size main-font-color"">
                                <i class=""icofont-tree-alt main-font-color icofont-2x""></i> Lumberjack
                            </p>
                        </div>

                        <div class=""item-padding"">
                            <hr />
                            <br />
                            <p class=""has-normal-font-size main-font-color"">
                                <i class=""icofont-mining main-font-color icofont-2x""></i> Miner
                            </p>
                        </div>

                        <div class=""item-padding"">
                            <hr />
                            <br />
                            <p class=""has-normal-font-size main-font-color"">
                                <i class=""icofont-bear-tracks main-font-color icofont-2x""></i> Tracker
                            </p");
                WriteLiteral(@">
                        </div>

                        <div class=""item-padding"">
                            <hr />
                            <br />
                            <p class=""has-normal-font-size main-font-color"">
                                <i class=""icofont-skull-face main-font-color icofont-2x""></i> Head Hunter
                            </p>
                        </div>

                        <div class=""item-padding"">
                            <hr />
                            <br />
                            <p class=""has-normal-font-size main-font-color"">
                                <i class=""icofont-flora-flower icofont-2x main-font-color""></i> Herbalist
                            </p>
                        </div>

                        <div class=""item-padding"">
                            <hr />
                            <br />
                            <p class=""has-normal-font-size main-font-color"">
                               ");
                WriteLiteral(@" <i class=""icofont-forest-fire icofont-2x main-font-color""></i> Banisher
                            </p>
                        </div>

                        <div class=""item-padding"">
                            <hr />
                            <br />
                            <p class=""has-normal-font-size main-font-color"">
                                <i class=""icofont-fish-5 icofont-2x icofont-flip-horizontal main-font-color""></i> Angler
                            </p>
                        </div>

                        <div class=""item-padding"">
                            <hr />
                            <br />
                            <p class=""has-normal-font-size main-font-color"">
                                <i class=""icofont-farmer-alt main-font-color icofont-2x""></i> Farmer
                            </p>
                        </div>

                        <div class=""item-padding"">
                            <hr />
                            <b");
                WriteLiteral(@"r />
                            <p class=""has-normal-font-size main-font-color"">
                                <i class=""fas fa-dumpster main-font-color has-large-font-size""></i> Scrapper
                            </p>
                        </div>

                        <br />
                        <hr />
                        <div class=""item-padding"">
                            <p class=""has-large-font-size main-font-color"">
                                <i class=""fas fa-pencil-ruler main-font-color""></i> Crafter Type Professions
                            </p>

                            <div class=""item-padding"">
                                <p class=""has-normal-font-size main-font-color"">
                                    <i class=""icofont-saw main-font-color icofont-2x""></i> Carpenter
                                </p>
                            </div>

                            <div class=""item-padding"">
                                <hr />
           ");
                WriteLiteral(@"                     <br />
                                <p class=""has-normal-font-size main-font-color"">
                                    <i class=""icofont-gavel main-font-color icofont-2x""></i> Forger
                                </p>
                            </div>
                            <div class=""item-padding"">
                                <hr />
                                <br />
                                <p class=""has-normal-font-size main-font-color"">
                                    <i class=""icofont-crocodile main-font-color icofont-2x""></i> Leatherworker
                                </p>
                            </div>
                            <div class=""item-padding"">
                                <hr />
                                <br />
                                <p class=""has-normal-font-size main-font-color"">
                                    <i class=""icofont-camping-vest main-font-color icofont-2x""></i> Tailor
        ");
                WriteLiteral(@"                        </p>
                            </div>
                            <div class=""item-padding"">
                                <hr />
                                <br />
                                <p class=""has-normal-font-size main-font-color"">
                                    <i class=""icofont-test-bulb main-font-color icofont-2x""></i> Alchemic
                                </p>
                            </div>
                            <div class=""item-padding"">
                                <hr />
                                <br />
                                <p class=""has-normal-font-size main-font-color"">
                                    <i class=""icofont-triangle main-font-color icofont-2x""></i> Conjurer
                                </p>
                            </div>
                            <div class=""item-padding"">
                                <hr />
                                <br />
                         ");
                WriteLiteral(@"       <p class=""has-normal-font-size main-font-color"">
                                    <i class=""icofont-swirl main-font-color icofont-2x""></i> Scaleworker
                                </p>
                            </div>
                            <div class=""item-padding"">
                                <hr />
                                <br />
                                <p class=""has-normal-font-size main-font-color"">
                                    <i class=""icofont-chef main-font-color icofont-2x""></i> Chef
                                </p>
                            </div>
                            <div class=""item-padding"">
                                <hr />
                                <br />
                                <p class=""has-normal-font-size main-font-color"">
                                    <i class=""icofont-garbage main-font-color icofont-2x""></i> Recycler
                                </p>
                            </div>
");
                WriteLiteral("                        </div>\r\n                    </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("partial", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "cb36e5b4889b1f74a7e1bccd180e716a31845b7887798", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_PartialTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_PartialTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_PartialTagHelper.Name = (string)__tagHelperAttribute_23.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_23);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_24);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n</html>\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public UserManager<AppUser> UserManager { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
