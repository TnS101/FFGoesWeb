@model Application.GameCQ.Battles.Queries.GetBattleUnitsQuery.BattleUnitsListViewModel
<title>Command</title>
<partial name="_WorldNavBar">
    @{
        double heroCurrentHP = Model.Hero.CurrentHP;
        double enemyCurrentHP = Model.Enemy.CurrentHP;
    }
    <div class="fade-in aligncenter starting-div">
        <h1 style="text-align:center" class="item-padding">@Model.Hero.Name  vs  @Model.Enemy.Name</h1>
        <div>
            <img src="@Model.Hero.ImagePath" alt="Player" width="80" height="80" id="hero" />
            <img src="@Model.Enemy.ImagePath" alt="Enemy" style="padding-left:250px;" id="enemy" />
            <br />
            <br />
                <div class="flow-bar" style="margin-right:128px">
                    <div id="player-health-bar" class="player-health-bar" style="width: @(Model.Hero.CurrentHP / (Model.Hero.MaxHP / 100))%; max-width: 210px">
                    </div>
                </div>
                <div class="flow-bar">
                    <div id="enemy-health-bar" class="enemy-health-bar" style="width: @(Model.Enemy.CurrentHP / (Model.Enemy.MaxHP / 100))%; max-width: 210px">
                    </div>
                </div>
                <div class="item-padding">
                    <div class="flow-bar" style="margin-right:128px">
                        <div id="player-mana-bar" class="mana-bar" style="width: @(Model.Hero.CurrentMana / (Model.Hero.MaxMana / 100))%; max-width: 210px">
                        </div>
                    </div>

                    <div class="flow-bar">
                        <div id="enemy-mana-bar" class="mana-bar" style="width: @(Model.Enemy.CurrentMana / (Model.Enemy.MaxMana / 100))%; max-width: 210px">
                        </div>
                    </div>
                </div>
                <div class="item-padding"><hr /></div>
            <div class="item-padding">
                <form method="post" data-ajax="true" data-ajax-method="post" data-ajax-url="/Battle/Command" data-ajax-complete="Action">
                    <select class="command" name="command">
                        <option value="Attack">Attack</option>
                        <option value="Defend">Defend</option>
                        <option value="Spell">Spell</option>
                    </select>
                    <div class="item-padding fade-in" hidden id="spells">
                        <select name="spellId" id="spellId">
                            <option selected value="0">Choose A Spell</option>
                            @foreach (var spell in Model.Hero.Spells)
                            {
                                <option value="@spell.Id">@spell.Name</option>
                            }
                        </select>
                    </div>
                    <div class="item-padding" id="button">
                        <input type="submit" class="main-button" name="button" id="action" value="Action"/>
                    </div>
                </form>
                <div class="item-padding">
                </div>
            </div>
        </div>
    </div>
    <partial name="_Footer">
        @section scripts
        {
            <script src="~/js/battle.js"></script>
            <script>
                $(document).ready(function () {

                    if ('@heroCurrentHP' <= 0 || '@enemyCurrentHP' <= 0) {
                        window.location.href = "/Hero/All";
                    }

                    Action = (data) => {
                        if (data.status == 200) {
                            let hero = data.responseJSON.battleUnits.hero;
                            let enemy = data.responseJSON.battleUnits.enemy;

                            hero.spells.reduce(function (acc, spell) {
                                if (spell.satsifiesCondition == true) {
                                    $(`#spellId [value='${spell.id}']`).css('background-color','red');
                                }
                            });

                            function update(div, max) {
                                var msecsPerUpdate = 1000 / 60;
                                var duration = 1.6;
                                var interval = max / (duration * 1000 / msecsPerUpdate);
                                var bar = $(`#${div}`);

                                function animator()
                                {
                                    if (max < bar.width() / 2.1)
                                    {
                                        $(`#${div}`).width(`${(bar.width() / 2.1) - interval}%`);
                                        if (bar.width() / 2.1 - interval >= max)
                                        {
                                            setTimeout(animator, msecsPerUpdate);
                                        }
                                    } else {
                                        $(`#${div}`).width(`${(bar.width() / 2.1) + interval}%`);
                                        if (bar.width() / 2.1 + interval < max)
                                        {
                                            setTimeout(animator, msecsPerUpdate);
                                        }
                                    }
                                }

                                animator();
                            }

                            update('player-health-bar', hero.currentHP / (hero.maxHP / 100));
                            update('player-mana-bar', hero.currentMana / (hero.maxMana / 100));
                            update('enemy-health-bar', enemy.currentHP / (enemy.maxHP / 100));
                            update('enemy-mana-bar', enemy.currentMana / (enemy.maxMana / 100));

                            if (hero.currentHP <= 0) {
                                window.location.href = "/Hero/Killed";
                            } else if (enemy.currentHP <= 0) {
                                window.location.href = "/Battle/End";
                            }

                        } else {
                            console.log(data.responseJSON);
                            //window.location.href = '/Error/Default';
                        }
                    }
                });

            </script>
        }
